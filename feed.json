{"title":"SYJ个人主页","description":"工作生活,随笔随记","language":"zh-Hans","link":"http://yoursite.com","pubDate":"Tue, 20 Dec 2016 04:56:08 GMT","lastBuildDate":"Tue, 20 Dec 2016 04:58:43 GMT","generator":"hexo-generator-json-feed","webMaster":"JoYous-SUN","items":[{"title":"js中的观察者模式","link":"http://yoursite.com/2016/12/20/js中的观察者模式/","description":"观察者模式 简介 观察者模式又称发布订阅模式，是一种最常用的设计模式之一了。讲道理，如果我们写的不是稍微底层的代码，可能不会用到它。 但是有了它会让代码更灵活，更加规整，减少冗余代码，方便分模块，分功能开发。 引入 在前端业务中，可能用的比较多的地方可能就是自定义事件了。其实浏览器的事件也是观察者模式","pubDate":"Tue, 20 Dec 2016 04:56:08 GMT","guid":"http://yoursite.com/2016/12/20/js中的观察者模式/","category":"JavaScript,设计模式"},{"title":"redux-devtools简单使用","link":"http://yoursite.com/2016/12/16/redux-devtools简单使用/","description":"Introducingredux-devtools 是一个非常棒的工具，它可以让你实时的监控Redux的状态树的Store Installation123npm install --save-dev redux-devtoolsnpm install --save-dev redux-devtools-log-monitornpm install --save-dev redux-devtools-dock-monitor","pubDate":"Fri, 16 Dec 2016 12:07:16 GMT","guid":"http://yoursite.com/2016/12/16/redux-devtools简单使用/","category":"redux"},{"title":"redux之store","link":"http://yoursite.com/2016/12/16/redux之store/","description":"store store 是什么 store是一个管理state的大对象，并且提供了一系列的方法123getState(), //返回statedispatch(action), // 派发一个actionsubscribe() //订阅监听 通过redux 提供的 createStore,传入reducer函数，我们可以得到一个store对象","pubDate":"Fri, 16 Dec 2016 12:05:51 GMT","guid":"http://yoursite.com/2016/12/16/redux之store/","category":"react,redux"},{"title":"Promise笔记","link":"http://yoursite.com/2016/12/16/promise笔记/","description":"promise 为什么会有promise 根据官方的说法，promise的出现是为了解决”callback hell”回调地狱, 将横向的嵌套回调改为可以纵向以then的方式加载执行。 简介 &amp; 用法 1234567891011121314// 通过new Promise 得到一个promise的实例，也就是一个普通对象。构造函数需要传一个callback 去定义何时执行resolve，reject 这两个函数var promise = new Promise(function(resolve, reject) &#123; if('code') &#123; // code 可能是异步操作成功判断条件 resolve() &#125; else &#123; reject() &#125;&#125;)// then的两个参数(resolve, reject)promise.then(function()&#123; console.log('success')&#125;,function()&#123; console.log('failure')&#125;)","pubDate":"Fri, 16 Dec 2016 11:26:57 GMT","guid":"http://yoursite.com/2016/12/16/promise笔记/","category":"JavaScript,Promise"},{"title":"redux之reducer","link":"http://yoursite.com/2016/12/15/redux之reducer/","description":"reducer 为什么叫reducer大概是由于reducer函数都能作为数组的reduce方法的参数，所以叫reducer的吧。 Array中的reducereduce需要两个参数，一个是回调函数，一个是初始值，没有初始值，会默认把数组第一个当初始值，并从第二个开始 模拟数组的reduce方法 1234567891011121314Array.prototype.reduce = function reduce (callback, init) &#123; var i = 0; if(typeof init === 'undefined') &#123; init = this[0]; i = 1; &#125; if(typeof callback !== 'function') &#123; throw new Error(callback + ' is not function') &#125; for( ;i&lt; this.length; i++ ) &#123; init = callback(init, this[i]) &#125; return init ;&#125;","pubDate":"Thu, 15 Dec 2016 05:26:57 GMT","guid":"http://yoursite.com/2016/12/15/redux之reducer/","category":"react,redux"}]}